/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { TextureLoader, VideoTexture, LinearEncoding } from "three";
import { useLoader, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";

const ballMaterial = {
  clearcoat: 0.0,
  cleacoatRoughness: 0.1,
  metalness: 0.999,
  roughness: 0.0,
  color: 0xcccccc,
};

export function Model(props: { tex: VideoTexture | undefined; scale: number }) {
  //@ts-ignore
  const { nodes, materials } = useGLTF("./website_3d_terrex_stone.glb");
  const teexture = useLoader(TextureLoader, "/images/ditto.png");
  console.log(teexture);

  const [texture, setTexture] = useState<VideoTexture | undefined>();
  const envMap = useLoader(TextureLoader, "./images/ditto.png");

  // useEffect(() => {
  //   if (!videoRef.current) return;

  //   const initWebcam = async () => {
  //     try {
  //       const stream = await navigator.mediaDevices.getUserMedia({
  //         video: true,
  //       });
  //       if (videoRef.current) {
  //         videoRef.current.srcObject = stream;
  //         videoRef.current.play();

  //         const videoTexture = new VideoTexture(videoRef.current);
  //         videoTexture.encoding = LinearEncoding;
  //         setTexture(videoTexture);
  //       }
  //     } catch (error) {
  //       console.error("Error accessing webcam:", error);
  //     }
  //   };

  //   initWebcam();

  //   return () => {
  //     if (videoRef.current) {
  //       const stream = videoRef.current.srcObject as MediaStream;
  //       if (stream) {
  //         const tracks = stream.getTracks();
  //         tracks.forEach((track) => track.stop());
  //       }
  //     }
  //   };
  // }, []);

  // useFrame(() => {
  //   if (videoRef.current && texture) {
  //     texture.needsUpdate = true;
  //   }
  // });

  useFrame(() => {
    if (props.tex) {
      props.tex.needsUpdate = true;
    }
  });

  return (
    <>
      <group scale={props.scale} dispose={null}>
        <mesh
          castShadow
          geometry={nodes.terrex_stone.geometry}
          rotation-x={Math.PI}
        >
          <meshLambertMaterial
            // color={ballMaterial.color}
            // clearcoat={ballMaterial.clearcoat}
            // clearcoatRoughness={ballMaterial.cleacoatRoughness}
            // roughness={0.2}
            // metalness={1}
            // reflectivity={1}
            map={props.tex ?? envMap}
          />
        </mesh>
      </group>
    </>
  );
}

useGLTF.preload("./website_3d_terrex_stone.glb");
